% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper.R
\name{get_model}
\alias{get_model}
\title{Set up a \code{k_ontram} or \code{k_ontram_ci} model}
\usage{
get_model(
  mod = c("silscs", "sics", "cils", "ci"),
  y_dim,
  x_dim = NULL,
  nn,
  input_shape
)
}
\arguments{
\item{nn}{function to function to build neural network used for modeling complex intercept or complex shift terms.
Arguments \code{input_shape}, \code{output_shape} and \code{mbl} are required.}
}
\description{
Set up a \code{k_ontram} or \code{k_ontram_ci} model
}
\examples{
nn <- function(output_shape = NULL, mbl = FALSE, input_shape = dim(im)[2:4], ...) {
  m <- keras_model_sequential() \%>\%
    layer_conv_2d(filters = 16,
                  input_shape = input_shape, kernel_size = c(3, 3), activation = "relu") \%>\%
    layer_max_pooling_2d(pool_size = c(2, 2)) \%>\%
    layer_conv_2d(filters = 32, kernel_size = c(3, 3), padding = "same", activation = "relu") \%>\%
    layer_max_pooling_2d(pool_size = c(2, 2)) \%>\%
    layer_flatten() \%>\%
    layer_dense(units = 50, activation = "relu") \%>\%
    layer_dense(output_shape, activation = "linear", use_bias = FALSE) \%>\%
    {if (mbl){
      ontram::layer_trafo_intercept()(.)
    } else .
    }
  return(m)
}

get_model(mod = "sics", y_dim = 10L, x_dim = NULL, nn = nn, input_shape = c(28, 28, 1))
}
